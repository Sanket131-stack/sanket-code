# ---------------------------
# 1. Import libraries
# ---------------------------
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# ---------------------------
# 2. Load dataset
# ---------------------------
iris = #load data
X = #confidentail
y = #confidential

# ---------------------------
# 3. Train/Test Split
# ---------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ---------------------------
# 4. Define Model
# ---------------------------
rf = RandomForestClassifier(random_state=42)

# ---------------------------
# 5. Define Hyperparameter Grid
# ---------------------------
param_grid = {
    'n_estimators': [50, 100, 200],        # number of trees
    'max_depth': [None, 5, 10],            # depth of tree
    'min_samples_split': [2, 5, 10],       # minimum samples to split
    'min_samples_leaf': [1, 2, 4],         # minimum samples at leaf
    'max_features': ['sqrt', 'log2']       # feature selection strategy
}

# ---------------------------
# 6. Grid Search with Cross-Validation
# ---------------------------
grid_search = GridSearchCV(
    estimator=rf,
    param_grid=param_grid,
    cv=5,                 # 5-fold cross-validation
    n_jobs=-1,            # use all CPUs
    verbose=1
)

grid_search.fit(X_train, y_train)

# ---------------------------
# 7. Best Parameters & Score
# ---------------------------
print("Best Parameters:", grid_search.best_params_)
print("Best Cross-Validation Score:", grid_search.best_score_)

# ---------------------------
# 8. Evaluate on Test Set
# ---------------------------
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)

print("Test Accuracy:", accuracy_score(y_test, y_pred))
